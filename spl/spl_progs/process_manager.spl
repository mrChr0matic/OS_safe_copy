//Process Manager (MOD 1)

alias fnNumber R1;
alias currentPID R2;

// GET_PCB_ENTRY
if(fnNumber==1) then
	currentPID=0;
	while(currentPID<16) do
		if([PROCESS_TABLE+currentPID*16+4]==TERMINATED) then
			break;
		endif;
		currentPID=currentPID+1;
	endwhile;

	if(currentPID==16) then
		R0=-1;
		return;
	endif;

	[PROCESS_TABLE+currentPID*16+1]=currentPID;
	[PROCESS_TABLE+currentPID*16+4]=ALLOCATED;
	[PROCESS_TABLE+currentPID*16+14]=PAGE_TABLE_BASE+currentPID*20;
	[PROCESS_TABLE+currentPID*16+15]=10;
	R0=currentPID;
	return;
endif;

// FREE USER AREA PAGE
if(fnNumber == 2) then
	alias userAreaPage R3;
	userAreaPage = [PROCESS_TABLE + 16*currentPID + 11];
	multipush(R1, R2, R3);
	R1 = 2;
	R2 = userAreaPage;
	breakpoint;
	call MEMORY_MANAGER;
	multipop(R1, R2, R3);
	return;
endif;

// EXIT PROCESS
if(fnNumber == 3) then
	multipush(R1, R2);
	R1 = 4;
	R2 = currentPID;
	call PROCESS_MANAGER;
	multipop(R1, R2);
	breakpoint;
	multipush(R1, R2);
	R1 = 2;
	R2 = currentPID;
	breakpoint;
	call PROCESS_MANAGER;
	multipop(R1, R2);
	[PROCESS_TABLE + (16*currentPID) + 4] = TERMINATED;
	return;
endif;

// FREE PAGE TABLE
if(fnNumber == 4) then
	
	[PTBR + 0] = -1;
	[PTBR + 1] = "0000";	
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

	alias i R3;
	alias pageNum R4;
	i = 1;

	while(i<(PTLR-1)) do
		pageNum = [PTBR + 2 + 2*i];
		if(pageNum!=-1) then
			multipush(R1, R2, R3, R4);
			R1 = 2;
			R2 = pageNum;
			call MEMORY_MANAGER;
			multipop(R1, R2, R3, R4);
			[PTBR + 2 + 2*i] = -1;
			[PTBR + 2 + 2*i + 1] = "0000";	
		endif;
	i = i + 1;
	endwhile;
	i=2;
	while(i<10) do
		if([DISK_MAP_TABLE+currentPID*10+i]!=-1) then
			if(i<4 || i>7) then
				multipush(R1,R2,R3,R4,R5);
				R1=4;
				R3=currentPID;
				R2=[DISK_MAP_TABLE+currentPID*16+i];
				call MEMORY_MANAGER;
				multipop(R1,R2,R3,R4,R5);
			endif;
			[DISK_MAP_TABLE+currentPID*16+i]=-1;
		endif;
		i=i+1;
	endwhile;
	return;

endif;