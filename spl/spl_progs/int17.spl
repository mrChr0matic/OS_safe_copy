alias userSP R1;
userSP=SP;
alias currPID R2;
currPID=[SYSTEM_STATUS_TABLE+1];
alias ret R4;
ret=[PTBR+2*(userSP-1)/512]*512+(userSP-1)%512;
alias process_table R3;
process_table=PROCESS_TABLE+currPID*16;
[process_table+13]=userSP;
SP=[process_table+11]*512-1;

[process_table+9]=27;

if(currPID!=1) then
    [ret]=-2;
    [process_table+9]=0;
    SP=userSP;
    ireturn;
endif;

alias userName R5;
alias password R6;

userName=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];
password=[[PTBR+2*((userSP-3)/512)]*512+(userSP-3)%512];

alias i R7;
i=1;
while(i<MAX_USER_NUM) do
    if([USER_TABLE+2*i]==userName) then
        break;
    endif;
    i=i+1;
endwhile;

if(i==MAX_USER_NUM) then
    [ret]=-1;
    [process_table+9]=0;
    SP=userSP;
    ireturn;
endif;

encrypt password;

if(password!=[USER_TABLE+2*i+1]) then
    [ret]=-1;
    [process_table+9]=0;
    SP=userSP;
    ireturn;
endif;

[PROCESS_TABLE+2*16+4]=CREATED;
[PROCESS_TABLE+2*16+3]=i;

[process_table+4]=WAIT_PROCESS;
[process_table+5]=2;

[SYSTEM_STATUS_TABLE+0]=i;

multipush(R1,R2,R3,R4,R5,R6,R7);
call SCHEDULER;
multipop(R1,R2,R3,R4,R5,R6,R7);

[ret]=0;
[process_table+9]=0;
SP=userSP;
ireturn;