breakpoint;

alias func_num R1;
alias page_num R2;

// GET FREE PAGE
if ( func_num == 1 ) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    while( [SYSTEM_STATUS_TABLE + 2] == 0 ) do
       [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
       multipush(R1,R2);
       call SCHEDULER; 
       multipop(R1,R2);
    endwhile;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    
    alias free_page R0;
    free_page = 76;
    while([MEMORY_FREE_LIST + free_page] == 1) do
        free_page = free_page + 1;
    endwhile;
    [MEMORY_FREE_LIST + free_page] = 1;
    return;
endif;


// RELEASE PAGE
if ( func_num == 2 ) then
	[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] - 1;

    if ([MEMORY_FREE_LIST + page_num] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;

    alias i R3;
    i = 0 ;
    while(i < 16) do
        if([PROCESS_TABLE + i*16 + 4] == WAIT_MEM) then
            [PROCESS_TABLE + i*16 + 4 ] = READY;
        endif;
        i = i + 1;
    endwhile;
	return;
endif;

// release block
if(func_num==4) then
    alias block_no R2;
    alias currentPID R3;
    [DISK_FREE_LIST+block_no]=[DISK_FREE_LIST+block_no]-1;
    return;
endif;

// get code page
if(func_num==5) then
    alias block_no R2;
    alias i R3;
    alias j R4;
    alias page_no R5;
    i=0;
    while(i<16) do
        j=4;
        while(j<8) do
            if([DISK_MAP_TABLE+10*i+j]==block_no) then
                page_no=[PAGE_TABLE_BASE+20*i+8+2*(j-4)];
                if(page_no!=-1) then
                    [MEMORY_FREE_LIST+page_no]=[MEMORY_FREE_LIST+page_no]+1;
                    R0=page_no;
                    return;
                endif;
            endif;
            j=j+1;
        endwhile;
        i=i+1;
    endwhile;
    multipush(R1,R2);
    R1=1;
    call MEMORY_MANAGER;
    page_no=R0;
    multipop(R1,R2);
    multipush(R1,R2,R5);
    R1=2;
    R4=R2;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=page_no;
    call DEVICE_MANAGER;
    multipop(R1,R2,R5);
    R0=page_no;
    return;
endif;