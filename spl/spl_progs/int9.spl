

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512 - 1;		

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

alias file_name R1;
file_name = [([PTBR + 2 * (userSP - 4)/ 512] * 512) + ((userSP - 4) % 512)];  

alias inode_index R6;
inode_index = 0;
while( inode_index < MAX_FILE_NUM && [INODE_TABLE + inode_index*16 + 1] != file_name) do
	inode_index = inode_index + 1;	
endwhile;

if ( inode_index == MAX_FILE_NUM || [INODE_TABLE + inode_index*16 + 1] != file_name || [INODE_TABLE + inode_index*16 + 0] != EXEC) then
	[([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512)] = -1;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
	ireturn;
endif;

multipush(R0,R1,R2);
	 
alias func_num R1;
alias currPID R2;
func_num = 3;
currPID = [SYSTEM_STATUS_TABLE + 1];
	 
call PROCESS_MANAGER;
	 
multipop(R0,R1,R2);

alias user_area_page_num R3;
user_area_page_num = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
[MEMORY_FREE_LIST + user_area_page_num] = [MEMORY_FREE_LIST + user_area_page_num] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = user_area_page_num*512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = inode_index;

// setting up page table for new process
PTBR = PAGE_TABLE_BASE+20*[SYSTEM_STATUS_TABLE + 1];

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

multipush(R0,R1,R2,R3);
// func_num = 1;

// call MEMORY_MANAGER;

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";

// func_num = 1;
// call MEMORY_MANAGER;

//Heap
[PTBR+6] = -1;
[PTBR+7] = "0000";

func_num = 1;
call MEMORY_MANAGER;

//Stack
[PTBR+16] = R0;
[PTBR+17] = "0110";

func_num = 1;
call MEMORY_MANAGER;

//Stack
[PTBR+18] = R0;
[PTBR+19] = "0110";

multipop(R0);


alias blocks_occupied R4;
blocks_occupied = [INODE_TABLE + inode_index*16 + 2]/512 + 1;

// code
multipush(R0,R1,R2,R3,R4,R5,R6,R7);
alias block_no R2;
func_num=5;
block_no=[INODE_TABLE+inode_index*16+8];
call MEMORY_MANAGER;
[PTBR+8]=R0;
[PTBR+9]="0110";

alias i R2;
i=1;
while(i<4) do
	[PTBR + 8 + 2*i] = -1;
	[PTBR + 9 + 2*i] = "0000";
i = i + 1;
endwhile;
multipop(R0, R1, R2, R3, R4, R5, R6,R7);

// Initialize Disk Map Table
alias currPID R2;
alias i R1;
R2=[SYSTEM_STATUS_TABLE+1];
i=2;
while(i<10) do
if(i==2 || i==3) then // Heap
	[DISK_MAP_TABLE + currPID*10 + i] = -1;
else
if(i==8 || i==9) then // Stack
	[DISK_MAP_TABLE + currPID*10 + i] = -1;
else

if((i-4)<blocks_occupied) then // Code
	[DISK_MAP_TABLE + currPID*10  + i] = [INODE_TABLE + inode_index*16 + 8 + (i-4)];

else
	[DISK_MAP_TABLE + currPID*10 + i] = -1;
endif;
endif;
endif;
i = i + 1;
endwhile;


// initializing per process resource table
i = ([PROCESS_TABLE + currPID*16 + 11] +1)*512 - 16 ;
while(i < ( [PROCESS_TABLE + currPID*16 + 11] +1)*512 ) do
	[i] = -1;
	i = i + 2;
endwhile;

SP = 8 * 512 ;
[[PTBR+16] * 512] = [[PTBR+8] * 512 + 1];
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;


ireturn;